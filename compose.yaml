
services:
  server:
    build:
      context: .
    command: bash -c "python manage.py makemigrations Auth post application && python manage.py migrate --noinput && python manage.py create_superuser_if_not_exists && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      postgresql:
        condition: service_healthy  # âœ… Correct syntax
      rabbitmq:
        condition: service_started  # Optional, ensures RabbitMQ starts before Celery
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_HOST=postgresql
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=moundher0987
      - POSTGRES_DB=mydatabase
      - POSTGRES_PORT=5432
    volumes:
      - .:/app
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  postgresql:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: moundher0987
      POSTGRES_DB: mydatabase
    healthcheck:  
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "mydatabase"]
      interval: 10s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  celery:
    build:
      context: .
    command: celery -A ProjectCore worker --loglevel=info
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false  
      - xpack.security.enrollment.enabled=false  
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
